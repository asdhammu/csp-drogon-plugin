// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: CSPDrogon.flex

// Copyright 2000-2022 JetBrains s.r.o. and other contributors. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.
package com.asdhammu.cspdrogon.language;

import com.asdhammu.cspdrogon.language.psi.CSPDrogonTypes;
import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.TokenType;
import static com.asdhammu.cspdrogon.language.CSPDrogonParserDefinition.*;


class CSPDrogonLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int IN_DIRECTIVE = 2;
  public static final int IN_PARAMETER = 4;
  public static final int IN_COMMENT = 6;
  public static final int START_TAG_NAME = 8;
  public static final int END_TAG_NAME = 10;
  public static final int BEFORE_TAG_ATTRIBUTES = 12;
  public static final int TAG_ATTRIBUTES = 14;
  public static final int ATTRIBUTE_VALUE_START = 16;
  public static final int ATTRIBUTE_VALUE_DQ = 18;
  public static final int ATTRIBUTE_VALUE_SQ = 20;
  public static final int PROCESSING_INSTRUCTION = 22;
  public static final int TAG_CHARACTERS = 24;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\121\u0100\1\u2600\4\u0100\1\u2700"+
    "\1\u0100\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100"+
    "\1\u2e00\41\u1f00\1\u0100\1\u2f00\1\u3000\1\u0100\1\u3100\1\u3200"+
    "\1\u3300\1\u3400\1\u1f00\1\u3500\1\u3600\1\u3700\1\u3800\1\u0100"+
    "\1\u3900\1\u3a00\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u1f00"+
    "\1\u4000\1\u4100\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700"+
    "\1\u4800\1\u4900\1\u4a00\1\u4b00\1\u1f00\1\u4c00\1\u4d00\1\u4e00"+
    "\1\u1f00\3\u0100\1\u4f00\1\u5000\1\u5100\12\u1f00\4\u0100\1\u5200"+
    "\17\u1f00\2\u0100\1\u5300\41\u1f00\2\u0100\1\u5400\1\u5500\2\u1f00"+
    "\1\u5600\1\u5700\27\u0100\1\u5800\2\u0100\1\u5900\45\u1f00\1\u0100"+
    "\1\u5a00\1\u5b00\11\u1f00\1\u5c00\27\u1f00\1\u5d00\1\u5e00\1\u5f00"+
    "\1\u6000\11\u1f00\1\u6100\1\u6200\5\u1f00\1\u6300\1\u6400\4\u1f00"+
    "\1\u6500\21\u1f00\246\u0100\1\u6600\20\u0100\1\u6700\1\u6800\25\u0100"+
    "\1\u6900\34\u0100\1\u6a00\14\u1f00\2\u0100\1\u6b00\u0e05\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\2\1\1\2\2\1\22\0\1\1\1\3\1\4"+
    "\1\5\1\6\1\7\1\10\1\11\5\0\1\12\1\13"+
    "\1\14\12\15\1\16\1\17\1\20\1\21\1\22\2\0"+
    "\6\23\21\24\1\25\2\24\1\26\1\27\1\30\1\0"+
    "\1\24\1\0\1\31\1\32\1\33\1\23\1\34\1\23"+
    "\1\35\1\24\1\36\2\24\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\24\1\45\1\46\1\47\1\50\1\51"+
    "\1\25\1\52\1\24\12\0\1\53\44\0\1\16\12\0"+
    "\1\16\4\0\1\16\5\0\27\16\1\0\37\16\1\0"+
    "\u01ca\16\4\0\14\16\16\0\5\16\7\0\1\16\1\0"+
    "\1\16\201\0\5\16\1\0\2\16\2\0\4\16\1\0"+
    "\1\16\6\0\1\16\1\0\3\16\1\0\1\16\1\0"+
    "\24\16\1\0\123\16\1\0\213\16\10\0\246\16\1\0"+
    "\46\16\2\0\1\16\6\0\51\16\107\0\33\16\4\0"+
    "\4\16\55\0\53\16\43\0\2\16\1\0\143\16\1\0"+
    "\1\16\17\0\2\16\7\0\2\16\12\0\3\16\2\0"+
    "\1\16\20\0\1\16\1\0\36\16\35\0\131\16\13\0"+
    "\1\16\30\0\41\16\11\0\2\16\4\0\1\16\5\0"+
    "\26\16\4\0\1\16\11\0\1\16\3\0\1\16\27\0"+
    "\31\16\7\0\13\16\65\0\25\16\1\0\10\16\106\0"+
    "\66\16\3\0\1\16\22\0\1\16\7\0\12\16\17\0"+
    "\20\16\4\0\10\16\2\0\2\16\2\0\26\16\1\0"+
    "\7\16\1\0\1\16\3\0\4\16\3\0\1\16\20\0"+
    "\1\16\15\0\2\16\1\0\3\16\16\0\2\16\12\0"+
    "\1\16\10\0\6\16\4\0\2\16\2\0\26\16\1\0"+
    "\7\16\1\0\2\16\1\0\2\16\1\0\2\16\37\0"+
    "\4\16\1\0\1\16\23\0\3\16\20\0\11\16\1\0"+
    "\3\16\1\0\26\16\1\0\7\16\1\0\2\16\1\0"+
    "\5\16\3\0\1\16\22\0\1\16\17\0\2\16\27\0"+
    "\1\16\13\0\10\16\2\0\2\16\2\0\26\16\1\0"+
    "\7\16\1\0\2\16\1\0\5\16\3\0\1\16\36\0"+
    "\2\16\1\0\3\16\17\0\1\16\21\0\1\16\1\0"+
    "\6\16\3\0\3\16\1\0\4\16\3\0\2\16\1\0"+
    "\1\16\1\0\2\16\3\0\2\16\3\0\3\16\3\0"+
    "\14\16\26\0\1\16\64\0\10\16\1\0\3\16\1\0"+
    "\27\16\1\0\20\16\3\0\1\16\32\0\3\16\5\0"+
    "\2\16\36\0\1\16\4\0\10\16\1\0\3\16\1\0"+
    "\27\16\1\0\12\16\1\0\5\16\3\0\1\16\40\0"+
    "\1\16\1\0\2\16\17\0\2\16\22\0\10\16\1\0"+
    "\3\16\1\0\51\16\2\0\1\16\20\0\1\16\5\0"+
    "\3\16\10\0\3\16\30\0\6\16\5\0\22\16\3\0"+
    "\30\16\1\0\11\16\1\0\1\16\2\0\7\16\72\0"+
    "\60\16\1\0\2\16\14\0\7\16\72\0\2\16\1\0"+
    "\1\16\1\0\5\16\1\0\30\16\1\0\1\16\1\0"+
    "\12\16\1\0\2\16\11\0\1\16\2\0\5\16\1\0"+
    "\1\16\25\0\4\16\40\0\1\16\77\0\10\16\1\0"+
    "\44\16\33\0\5\16\163\0\53\16\24\0\1\16\20\0"+
    "\6\16\4\0\4\16\3\0\1\16\3\0\2\16\7\0"+
    "\3\16\4\0\15\16\14\0\1\16\21\0\46\16\1\0"+
    "\1\16\5\0\1\16\2\0\53\16\1\0\115\16\1\0"+
    "\4\16\2\0\7\16\1\0\1\16\1\0\4\16\2\0"+
    "\51\16\1\0\4\16\2\0\41\16\1\0\4\16\2\0"+
    "\7\16\1\0\1\16\1\0\4\16\2\0\17\16\1\0"+
    "\71\16\1\0\4\16\2\0\103\16\45\0\20\16\20\0"+
    "\126\16\2\0\6\16\3\0\u016c\16\2\0\21\16\1\0"+
    "\32\16\5\0\113\16\6\0\10\16\7\0\15\16\1\0"+
    "\4\16\16\0\22\16\16\0\22\16\16\0\15\16\1\0"+
    "\3\16\17\0\64\16\43\0\1\16\4\0\1\16\103\0"+
    "\131\16\7\0\5\16\2\0\42\16\1\0\1\16\5\0"+
    "\106\16\12\0\37\16\61\0\36\16\2\0\5\16\13\0"+
    "\54\16\4\0\32\16\66\0\27\16\11\0\65\16\122\0"+
    "\1\16\135\0\57\16\21\0\7\16\67\0\36\16\15\0"+
    "\2\16\12\0\54\16\32\0\44\16\51\0\3\16\12\0"+
    "\44\16\2\0\11\16\7\0\53\16\2\0\3\16\51\0"+
    "\4\16\1\0\6\16\1\0\2\16\3\0\1\16\5\0"+
    "\300\16\100\0\26\16\2\0\6\16\2\0\46\16\2\0"+
    "\6\16\2\0\10\16\1\0\1\16\1\0\1\16\1\0"+
    "\1\16\1\0\37\16\2\0\65\16\1\0\7\16\1\0"+
    "\1\16\3\0\3\16\1\0\7\16\3\0\4\16\2\0"+
    "\6\16\4\0\15\16\5\0\3\16\1\0\7\16\53\0"+
    "\2\53\107\0\1\16\15\0\1\16\20\0\15\16\145\0"+
    "\1\16\4\0\1\16\2\0\12\16\1\0\1\16\3\0"+
    "\5\16\6\0\1\16\1\0\1\16\1\0\1\16\1\0"+
    "\4\16\1\0\13\16\2\0\4\16\5\0\5\16\4\0"+
    "\1\16\64\0\2\16\u017b\0\57\16\1\0\57\16\1\0"+
    "\205\16\6\0\4\16\3\0\2\16\14\0\46\16\1\0"+
    "\1\16\5\0\1\16\2\0\70\16\7\0\1\16\20\0"+
    "\27\16\11\0\7\16\1\0\7\16\1\0\7\16\1\0"+
    "\7\16\1\0\7\16\1\0\7\16\1\0\7\16\1\0"+
    "\7\16\120\0\1\16\325\0\2\16\52\0\5\16\5\0"+
    "\2\16\4\0\126\16\6\0\3\16\1\0\132\16\1\0"+
    "\4\16\5\0\53\16\1\0\136\16\21\0\33\16\65\0"+
    "\306\16\112\0\360\16\20\0\215\16\103\0\56\16\2\0"+
    "\15\16\3\0\20\16\12\0\2\16\24\0\57\16\20\0"+
    "\37\16\2\0\106\16\61\0\11\16\2\0\147\16\2\0"+
    "\65\16\2\0\5\16\60\0\13\16\1\0\3\16\1\0"+
    "\4\16\1\0\27\16\35\0\64\16\16\0\62\16\76\0"+
    "\6\16\3\0\1\16\1\0\2\16\13\0\34\16\12\0"+
    "\27\16\31\0\35\16\7\0\57\16\34\0\1\16\20\0"+
    "\5\16\1\0\12\16\12\0\5\16\1\0\51\16\27\0"+
    "\3\16\1\0\10\16\24\0\27\16\3\0\1\16\3\0"+
    "\62\16\1\0\1\16\3\0\2\16\2\0\5\16\2\0"+
    "\1\16\1\0\1\16\30\0\3\16\2\0\13\16\7\0"+
    "\3\16\14\0\6\16\2\0\6\16\2\0\6\16\11\0"+
    "\7\16\1\0\7\16\1\0\53\16\1\0\14\16\10\0"+
    "\163\16\35\0\244\16\14\0\27\16\4\0\61\16\4\0"+
    "\156\16\2\0\152\16\46\0\7\16\14\0\5\16\5\0"+
    "\1\16\1\0\12\16\1\0\15\16\1\0\5\16\1\0"+
    "\1\16\1\0\2\16\1\0\2\16\1\0\154\16\41\0"+
    "\153\16\22\0\100\16\2\0\66\16\50\0\14\16\164\0"+
    "\5\16\1\0\207\16\44\0\32\16\6\0\32\16\13\0"+
    "\131\16\3\0\6\16\2\0\6\16\2\0\6\16\2\0"+
    "\3\16\43\0\14\16\1\0\32\16\1\0\23\16\1\0"+
    "\2\16\1\0\17\16\2\0\16\16\42\0\173\16\205\0"+
    "\35\16\3\0\61\16\57\0\40\16\15\0\24\16\1\0"+
    "\10\16\6\0\46\16\12\0\36\16\2\0\44\16\4\0"+
    "\10\16\60\0\236\16\22\0\44\16\4\0\44\16\4\0"+
    "\50\16\10\0\64\16\234\0\67\16\11\0\26\16\12\0"+
    "\10\16\230\0\6\16\2\0\1\16\1\0\54\16\1\0"+
    "\2\16\3\0\1\16\2\0\27\16\12\0\27\16\11\0"+
    "\37\16\101\0\23\16\1\0\2\16\12\0\26\16\12\0"+
    "\32\16\106\0\70\16\6\0\2\16\100\0\1\16\17\0"+
    "\4\16\1\0\3\16\1\0\35\16\52\0\35\16\3\0"+
    "\35\16\43\0\10\16\1\0\34\16\33\0\66\16\12\0"+
    "\26\16\12\0\23\16\15\0\22\16\156\0\111\16\67\0"+
    "\63\16\15\0\63\16\15\0\44\16\334\0\35\16\12\0"+
    "\1\16\10\0\26\16\232\0\27\16\14\0\65\16\113\0"+
    "\55\16\40\0\31\16\32\0\44\16\35\0\1\16\13\0"+
    "\43\16\3\0\1\16\14\0\60\16\16\0\4\16\25\0"+
    "\1\16\1\0\1\16\43\0\22\16\1\0\31\16\124\0"+
    "\7\16\1\0\1\16\1\0\4\16\1\0\17\16\1\0"+
    "\12\16\7\0\57\16\46\0\10\16\2\0\2\16\2\0"+
    "\26\16\1\0\7\16\1\0\2\16\1\0\5\16\3\0"+
    "\1\16\22\0\1\16\14\0\5\16\236\0\65\16\22\0"+
    "\4\16\24\0\1\16\40\0\60\16\24\0\2\16\1\0"+
    "\1\16\270\0\57\16\51\0\4\16\44\0\60\16\24\0"+
    "\1\16\73\0\53\16\15\0\1\16\107\0\33\16\345\0"+
    "\54\16\164\0\100\16\37\0\1\16\240\0\10\16\2\0"+
    "\47\16\20\0\1\16\1\0\1\16\34\0\1\16\12\0"+
    "\50\16\7\0\1\16\25\0\1\16\13\0\56\16\23\0"+
    "\1\16\42\0\71\16\7\0\11\16\1\0\45\16\21\0"+
    "\1\16\61\0\36\16\160\0\7\16\1\0\2\16\1\0"+
    "\46\16\25\0\1\16\31\0\6\16\1\0\2\16\1\0"+
    "\40\16\16\0\1\16\u0147\0\23\16\15\0\232\16\346\0"+
    "\304\16\274\0\57\16\321\0\107\16\271\0\71\16\7\0"+
    "\37\16\161\0\36\16\22\0\60\16\20\0\4\16\37\0"+
    "\25\16\5\0\23\16\260\0\100\16\200\0\113\16\5\0"+
    "\1\16\102\0\15\16\100\0\2\16\1\0\1\16\34\0"+
    "\370\16\10\0\363\16\15\0\37\16\61\0\3\16\21\0"+
    "\4\16\10\0\u018c\16\4\0\153\16\5\0\15\16\3\0"+
    "\11\16\7\0\12\16\146\0\125\16\1\0\107\16\1\0"+
    "\2\16\2\0\1\16\2\0\2\16\2\0\4\16\1\0"+
    "\14\16\1\0\1\16\1\0\7\16\1\0\101\16\1\0"+
    "\4\16\2\0\10\16\1\0\7\16\1\0\34\16\1\0"+
    "\4\16\1\0\5\16\1\0\1\16\3\0\7\16\1\0"+
    "\u0154\16\2\0\31\16\1\0\31\16\1\0\37\16\1\0"+
    "\31\16\1\0\37\16\1\0\31\16\1\0\37\16\1\0"+
    "\31\16\1\0\37\16\1\0\31\16\1\0\10\16\64\0"+
    "\55\16\12\0\7\16\20\0\1\16\u0171\0\54\16\24\0"+
    "\305\16\73\0\104\16\7\0\1\16\264\0\4\16\1\0"+
    "\33\16\1\0\2\16\1\0\1\16\2\0\1\16\1\0"+
    "\12\16\1\0\4\16\1\0\1\16\1\0\1\16\6\0"+
    "\1\16\4\0\1\16\1\0\1\16\1\0\1\16\1\0"+
    "\3\16\1\0\2\16\1\0\1\16\2\0\1\16\1\0"+
    "\1\16\1\0\1\16\1\0\1\16\1\0\1\16\1\0"+
    "\2\16\1\0\1\16\2\0\4\16\1\0\7\16\1\0"+
    "\4\16\1\0\4\16\1\0\1\16\1\0\12\16\1\0"+
    "\21\16\5\0\3\16\1\0\5\16\1\0\21\16\104\0"+
    "\327\16\51\0\65\16\13\0\336\16\2\0\u0182\16\16\0"+
    "\u0131\16\37\0\36\16\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[27648];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\2\0\1\2\11\0\1\1\2\3\5\1\3\4"+
    "\1\5\1\4\1\6\1\4\2\2\1\4\2\7\1\10"+
    "\1\11\1\7\1\12\1\7\1\13\2\14\1\15\1\16"+
    "\1\17\2\20\1\21\1\22\2\21\3\23\10\0\1\24"+
    "\1\25\1\26\1\27\1\0\1\30\1\0\6\2\1\0"+
    "\1\24\1\31\1\20\2\0\1\32\10\0\1\33\2\0"+
    "\2\2\1\0\1\32\5\2\1\34\1\35\2\0\1\36"+
    "\2\0\1\37\1\35\1\2\1\0\1\2\3\0\1\40"+
    "\1\0\1\41";

  private static int [] zzUnpackAction() {
    int [] result = new int[119];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\54\0\130\0\204\0\260\0\334\0\u0108\0\u0134"+
    "\0\u0160\0\u018c\0\u01b8\0\u01e4\0\u0210\0\u023c\0\u0268\0\u0294"+
    "\0\u02c0\0\u02ec\0\u0318\0\u0344\0\u0370\0\u02c0\0\u039c\0\u02ec"+
    "\0\u03c8\0\u03f4\0\u0420\0\u044c\0\u0478\0\u04a4\0\u04d0\0\u02c0"+
    "\0\u02ec\0\u04fc\0\u02c0\0\u0528\0\u0554\0\u0580\0\u02c0\0\u05ac"+
    "\0\u05d8\0\u02c0\0\u02c0\0\u02c0\0\u0604\0\u0630\0\u02c0\0\u02c0"+
    "\0\u02ec\0\u065c\0\u02c0\0\u02ec\0\u0580\0\u0688\0\u06b4\0\u06e0"+
    "\0\u070c\0\u0738\0\u0764\0\u0790\0\u07bc\0\u07e8\0\u0814\0\u023c"+
    "\0\u02c0\0\u0840\0\u02c0\0\u086c\0\u0898\0\u08c4\0\u08f0\0\u091c"+
    "\0\u0948\0\u0974\0\u09a0\0\u02c0\0\u02c0\0\u09cc\0\u09f8\0\u0a24"+
    "\0\u02c0\0\u0a50\0\u0a7c\0\u0aa8\0\u0ad4\0\u0b00\0\u0b2c\0\u0b58"+
    "\0\u0b84\0\u0bb0\0\u0bdc\0\u0c08\0\u0c34\0\u0c60\0\u0c8c\0\u0478"+
    "\0\u0cb8\0\u0ce4\0\u0d10\0\u0d3c\0\u0d68\0\u02c0\0\u02c0\0\u0d94"+
    "\0\u0dc0\0\u02c0\0\u0dec\0\u0e18\0\u02c0\0\u0478\0\u0e44\0\u0e70"+
    "\0\u0e9c\0\u0ec8\0\u0ef4\0\u0f20\0\u02c0\0\u0f4c\0\u02c0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[119];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\16\1\17\1\20\2\16\2\21\1\16\1\22\7\16"+
    "\1\23\5\16\1\24\1\25\24\16\1\26\2\17\4\26"+
    "\1\27\1\30\1\26\1\31\1\32\1\26\1\31\5\26"+
    "\3\31\3\26\22\31\2\26\2\17\5\26\1\30\12\26"+
    "\3\33\2\26\1\34\22\33\1\26\10\35\1\36\1\35"+
    "\1\37\41\35\10\40\1\41\5\40\1\42\1\40\1\43"+
    "\2\40\3\42\3\40\22\42\11\40\1\41\5\40\1\42"+
    "\1\40\1\44\2\40\3\42\3\40\22\42\2\40\1\45"+
    "\6\40\1\41\3\40\1\46\5\40\1\47\30\40\1\45"+
    "\1\50\1\17\1\51\1\50\1\52\4\50\1\53\2\50"+
    "\1\46\3\50\1\40\1\54\1\47\31\50\1\55\1\26"+
    "\2\55\1\52\4\55\1\53\2\55\1\56\5\55\1\47"+
    "\31\55\4\57\1\60\3\57\1\61\16\57\1\62\34\57"+
    "\1\61\1\60\15\57\1\62\24\57\10\26\1\30\43\26"+
    "\10\63\1\64\3\63\1\65\3\63\1\43\1\63\1\47"+
    "\31\63\1\16\1\0\3\16\2\0\1\16\1\0\7\16"+
    "\1\0\6\16\1\25\24\16\1\0\2\17\51\0\1\16"+
    "\1\17\1\20\2\16\2\0\1\16\1\0\7\16\1\0"+
    "\6\16\1\25\24\16\61\0\1\66\10\0\1\67\4\0"+
    "\3\67\3\0\1\70\3\67\1\71\1\67\1\71\1\67"+
    "\1\72\2\67\1\73\6\67\4\0\1\74\3\0\1\75"+
    "\4\0\1\76\1\0\1\77\4\0\3\77\3\0\22\77"+
    "\1\0\1\16\1\0\3\16\2\0\1\16\1\0\7\16"+
    "\1\0\5\16\1\100\1\25\25\16\1\0\6\16\1\0"+
    "\7\16\1\0\6\16\1\25\24\16\22\0\1\101\43\0"+
    "\1\31\2\0\1\31\5\0\3\31\3\0\22\31\34\0"+
    "\1\102\35\0\1\33\5\0\3\33\3\0\22\33\31\0"+
    "\1\103\23\0\12\35\1\104\46\35\1\105\4\35\1\104"+
    "\3\35\1\106\4\35\3\106\3\35\1\107\3\106\1\110"+
    "\1\106\1\110\1\106\1\111\2\106\1\112\6\106\13\35"+
    "\1\113\41\35\12\0\2\42\1\0\2\42\4\0\3\42"+
    "\3\0\22\42\15\0\1\114\40\0\1\45\51\0\1\45"+
    "\22\0\1\115\31\0\1\50\1\0\2\50\1\0\4\50"+
    "\1\0\2\50\1\0\3\50\3\0\32\50\1\17\1\51"+
    "\1\50\1\0\4\50\1\0\2\50\1\0\3\50\3\0"+
    "\31\50\1\55\1\0\12\55\1\116\5\55\1\0\32\55"+
    "\1\0\12\55\1\116\5\55\1\115\31\55\6\0\1\57"+
    "\62\0\1\117\7\0\1\120\40\0\2\67\1\0\2\67"+
    "\1\121\3\0\3\67\3\0\22\67\13\0\2\67\1\0"+
    "\2\67\1\121\3\0\3\67\3\0\7\67\1\122\2\67"+
    "\1\123\7\67\13\0\2\67\1\0\2\67\1\121\3\0"+
    "\3\67\3\0\15\67\1\124\4\67\13\0\2\67\1\0"+
    "\2\67\1\121\3\0\3\67\3\0\1\67\1\125\20\67"+
    "\13\0\2\67\1\0\2\67\1\121\3\0\3\67\3\0"+
    "\16\67\1\126\3\67\13\0\1\127\100\0\1\130\10\0"+
    "\1\131\21\0\1\132\4\0\3\132\3\0\22\132\13\0"+
    "\2\77\1\0\2\77\4\0\3\77\3\0\22\77\46\0"+
    "\1\133\6\0\12\35\1\134\53\35\1\104\2\35\1\135"+
    "\7\35\1\136\40\35\1\137\1\106\1\35\2\106\1\140"+
    "\3\35\3\106\3\35\22\106\13\35\1\137\1\106\1\35"+
    "\2\106\1\140\3\35\3\106\3\35\7\106\1\141\2\106"+
    "\1\142\7\106\13\35\1\137\1\106\1\35\2\106\1\140"+
    "\3\35\3\106\3\35\15\106\1\143\4\106\13\35\1\137"+
    "\1\106\1\35\2\106\1\140\3\35\3\106\3\35\1\106"+
    "\1\144\20\106\13\35\1\137\1\106\1\35\2\106\1\140"+
    "\3\35\3\106\3\35\16\106\1\145\3\106\23\35\1\146"+
    "\31\35\14\55\1\116\5\55\1\0\31\55\15\0\1\117"+
    "\1\0\1\147\51\0\1\150\5\0\1\150\5\0\4\150"+
    "\31\0\2\67\1\0\2\67\1\121\3\0\3\67\3\0"+
    "\12\67\1\124\7\67\13\0\2\67\1\0\2\67\1\121"+
    "\3\0\3\67\3\0\11\67\1\151\10\67\13\0\2\67"+
    "\1\0\2\67\1\147\3\0\3\67\3\0\22\67\13\0"+
    "\2\67\1\0\2\67\1\121\3\0\3\67\3\0\14\67"+
    "\1\122\5\67\13\0\2\67\1\0\2\67\1\121\3\0"+
    "\3\67\3\0\11\67\1\71\10\67\13\0\1\152\72\0"+
    "\1\153\60\0\1\154\27\0\2\132\1\0\2\132\4\0"+
    "\3\132\3\0\22\132\44\0\1\155\10\0\22\35\1\0"+
    "\43\35\1\104\2\35\1\135\1\35\1\156\46\35\1\104"+
    "\2\35\1\157\5\35\1\157\5\35\4\157\31\35\1\160"+
    "\1\106\1\35\2\106\1\140\3\35\3\106\3\35\22\106"+
    "\13\35\1\137\1\106\1\35\2\106\1\140\3\35\3\106"+
    "\3\35\12\106\1\143\7\106\13\35\1\137\1\106\1\35"+
    "\2\106\1\140\3\35\3\106\3\35\11\106\1\161\10\106"+
    "\13\35\1\137\1\106\1\35\2\106\1\156\3\35\3\106"+
    "\3\35\22\106\13\35\1\137\1\106\1\35\2\106\1\140"+
    "\3\35\3\106\3\35\14\106\1\141\5\106\13\35\1\137"+
    "\1\106\1\35\2\106\1\140\3\35\3\106\3\35\11\106"+
    "\1\110\10\106\1\35\15\0\1\150\1\0\1\147\3\0"+
    "\1\150\5\0\4\150\31\0\2\67\1\0\2\67\1\121"+
    "\3\0\3\67\3\0\14\67\1\124\5\67\53\0\1\162"+
    "\35\0\1\163\17\0\12\35\1\104\2\35\1\157\1\35"+
    "\1\156\3\35\1\157\5\35\4\157\31\35\2\106\1\35"+
    "\2\106\1\140\2\35\1\0\3\106\3\35\22\106\13\35"+
    "\1\137\1\106\1\35\2\106\1\140\3\35\3\106\3\35"+
    "\14\106\1\143\5\106\1\35\42\0\1\164\62\0\1\165"+
    "\51\0\1\166\52\0\1\167\5\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[3960];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\2\0\1\1\11\0\3\1\1\11\4\1\1\11"+
    "\11\1\1\11\2\1\1\11\3\1\1\11\2\1\3\11"+
    "\2\1\2\11\2\1\1\11\2\1\10\0\3\1\1\11"+
    "\1\0\1\11\1\0\6\1\1\0\2\11\1\1\2\0"+
    "\1\11\10\0\1\1\2\0\2\1\1\0\6\1\2\11"+
    "\2\0\1\11\2\0\1\11\2\1\1\0\1\1\3\0"+
    "\1\11\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[119];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  CSPDrogonLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return CSPDrogonTypes.XML_DATA_CHARACTERS;
            }
          // fall through
          case 34: break;
          case 2:
            { return CSP_COMMENT_CONTENT;
            }
          // fall through
          case 35: break;
          case 3:
            { return TokenType.WHITE_SPACE;
            }
          // fall through
          case 36: break;
          case 4:
            { yybegin(YYINITIAL);return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 37: break;
          case 5:
            { return CSPDrogonTypes.FILE_NAME;
            }
          // fall through
          case 38: break;
          case 6:
            { return CSPDrogonTypes.PARAM_VARIABLE_NAME;
            }
          // fall through
          case 39: break;
          case 7:
            { yybegin(YYINITIAL); yypushback(1); break;
            }
          // fall through
          case 40: break;
          case 8:
            { yybegin(BEFORE_TAG_ATTRIBUTES); return CSPDrogonTypes.XML_NAME;
            }
          // fall through
          case 41: break;
          case 9:
            { return CSPDrogonTypes.XML_START_TAG_START;
            }
          // fall through
          case 42: break;
          case 10:
            { yybegin(TAG_ATTRIBUTES); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 43: break;
          case 11:
            { yybegin(YYINITIAL); return CSPDrogonTypes.XML_TAG_END;
            }
          // fall through
          case 44: break;
          case 12:
            { return CSPDrogonTypes.XML_NAME;
            }
          // fall through
          case 45: break;
          case 13:
            { yybegin(ATTRIBUTE_VALUE_DQ); return CSPDrogonTypes.XML_ATTRIBUTE_VALUE_START_DELIMITER;
            }
          // fall through
          case 46: break;
          case 14:
            { yybegin(ATTRIBUTE_VALUE_SQ); return CSPDrogonTypes.XML_ATTRIBUTE_VALUE_START_DELIMITER;
            }
          // fall through
          case 47: break;
          case 15:
            { yybegin(ATTRIBUTE_VALUE_START); return CSPDrogonTypes.XML_EQ;
            }
          // fall through
          case 48: break;
          case 16:
            { yybegin(TAG_ATTRIBUTES); return CSPDrogonTypes.XML_ATTRIBUTE_VALUE_TOKEN;
            }
          // fall through
          case 49: break;
          case 17:
            { return CSPDrogonTypes.XML_ATTRIBUTE_VALUE_TOKEN;
            }
          // fall through
          case 50: break;
          case 18:
            { yybegin(TAG_ATTRIBUTES); return CSPDrogonTypes.XML_ATTRIBUTE_VALUE_END_DELIMITER;
            }
          // fall through
          case 51: break;
          case 19:
            { return CSPDrogonTypes.XML_TAG_CHARACTERS;
            }
          // fall through
          case 52: break;
          case 20:
            { return CSPDrogonTypes.XML_END_TAG_START;
            }
          // fall through
          case 53: break;
          case 21:
            { yybegin(START_TAG_NAME); yypushback(yylength());
            }
          // fall through
          case 54: break;
          case 22:
            { yybegin(IN_PARAMETER); return CSPDrogonTypes.PARAM_START;
            }
          // fall through
          case 55: break;
          case 23:
            { yybegin(YYINITIAL); return CSPDrogonTypes.DIRECTIVE_END;
            }
          // fall through
          case 56: break;
          case 24:
            { yybegin(YYINITIAL); return CSPDrogonTypes.PARAM_END;
            }
          // fall through
          case 57: break;
          case 25:
            { yybegin(YYINITIAL); return CSPDrogonTypes.XML_EMPTY_ELEMENT_END;
            }
          // fall through
          case 58: break;
          case 26:
            { return CSPDrogonTypes.XML_ENTITY_REF_TOKEN;
            }
          // fall through
          case 59: break;
          case 27:
            { yybegin(END_TAG_NAME); yypushback(yylength());
            }
          // fall through
          case 60: break;
          case 28:
            { yybegin(YYINITIAL);return CSP_COMMENT_END;
            }
          // fall through
          case 61: break;
          case 29:
            { return CSPDrogonTypes.XML_CHAR_ENTITY_REF;
            }
          // fall through
          case 62: break;
          case 30:
            { yybegin(IN_COMMENT);return CSP_COMMENT_START;
            }
          // fall through
          case 63: break;
          case 31:
            { return CSPDrogonTypes.CSP_EXT;
            }
          // fall through
          case 64: break;
          case 32:
            { yybegin(IN_DIRECTIVE); return CSPDrogonTypes.VIEW_START;
            }
          // fall through
          case 65: break;
          case 33:
            { yybegin(IN_DIRECTIVE); return CSPDrogonTypes.LAYOUT_START;
            }
          // fall through
          case 66: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
