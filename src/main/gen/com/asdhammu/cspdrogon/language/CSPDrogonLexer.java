// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: CSPDrogon.flex

package com.asdhammu.cspdrogon.language;

import com.asdhammu.cspdrogon.language.psi.CSPDrogonTypes;
import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.TokenType;
import static com.asdhammu.cspdrogon.language.CSPDrogonParserDefinition.*;


class CSPDrogonLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int IN_DIRECTIVE = 2;
  public static final int IN_PARAMETER = 4;
  public static final int IN_COMMENT = 6;
  public static final int START_TAG_NAME = 8;
  public static final int END_TAG_NAME = 10;
  public static final int BEFORE_TAG_ATTRIBUTES = 12;
  public static final int TAG_ATTRIBUTES = 14;
  public static final int ATTRIBUTE_VALUE_START = 16;
  public static final int ATTRIBUTE_VALUE_DQ = 18;
  public static final int ATTRIBUTE_VALUE_SQ = 20;
  public static final int TAG_CHARACTERS = 22;
  public static final int IN_CPP_DATA = 24;
  public static final int IN_DOCTYPE = 26;
  public static final int START_CPP_INCLUDE = 28;
  public static final int CPP_H_INCLUDE_DELIMITER = 30;
  public static final int IN_CPP_CONTROL = 32;
  public static final int IN_CPP_EXPECT_BRACE = 34;
  public static final int IN_CPP_CONTROL_ELSE = 36;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 
    16, 16, 17, 17, 18, 18
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\121\u0100\1\u2600\4\u0100\1\u2700"+
    "\1\u0100\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100"+
    "\1\u2e00\41\u1f00\1\u0100\1\u2f00\1\u3000\1\u0100\1\u3100\1\u3200"+
    "\1\u3300\1\u3400\1\u1f00\1\u3500\1\u3600\1\u3700\1\u3800\1\u0100"+
    "\1\u3900\1\u3a00\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u1f00"+
    "\1\u4000\1\u4100\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700"+
    "\1\u4800\1\u4900\1\u4a00\1\u4b00\1\u1f00\1\u4c00\1\u4d00\1\u4e00"+
    "\1\u1f00\3\u0100\1\u4f00\1\u5000\1\u5100\12\u1f00\4\u0100\1\u5200"+
    "\17\u1f00\2\u0100\1\u5300\41\u1f00\2\u0100\1\u5400\1\u5500\2\u1f00"+
    "\1\u5600\1\u5700\27\u0100\1\u5800\2\u0100\1\u5900\45\u1f00\1\u0100"+
    "\1\u5a00\1\u5b00\11\u1f00\1\u5c00\27\u1f00\1\u5d00\1\u5e00\1\u5f00"+
    "\1\u6000\11\u1f00\1\u6100\1\u6200\5\u1f00\1\u6300\1\u6400\4\u1f00"+
    "\1\u6500\21\u1f00\246\u0100\1\u6600\20\u0100\1\u6700\1\u6800\25\u0100"+
    "\1\u6900\34\u0100\1\u6a00\14\u1f00\2\u0100\1\u6b00\u0e05\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\2\1\1\2\2\1\22\0\1\1\1\3\1\4"+
    "\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\0"+
    "\1\14\1\15\1\16\1\17\1\20\12\21\1\22\1\23"+
    "\1\24\1\25\1\26\2\0\1\27\1\30\1\31\1\32"+
    "\1\33\1\27\1\34\1\35\1\36\2\34\1\37\1\40"+
    "\1\34\1\41\1\42\3\34\1\43\1\44\2\34\1\45"+
    "\1\46\1\34\1\47\1\50\1\51\1\0\1\34\1\0"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\2\34\1\63\1\64\1\65\1\66\1\67\1\70"+
    "\1\71\1\72\1\73\1\74\1\75\1\76\1\45\1\77"+
    "\1\34\1\100\1\101\1\102\7\0\1\103\44\0\1\22"+
    "\12\0\1\22\4\0\1\22\5\0\27\22\1\0\37\22"+
    "\1\0\u01ca\22\4\0\14\22\16\0\5\22\7\0\1\22"+
    "\1\0\1\22\201\0\5\22\1\0\2\22\2\0\4\22"+
    "\1\0\1\22\6\0\1\22\1\0\3\22\1\0\1\22"+
    "\1\0\24\22\1\0\123\22\1\0\213\22\10\0\246\22"+
    "\1\0\46\22\2\0\1\22\6\0\51\22\107\0\33\22"+
    "\4\0\4\22\55\0\53\22\43\0\2\22\1\0\143\22"+
    "\1\0\1\22\17\0\2\22\7\0\2\22\12\0\3\22"+
    "\2\0\1\22\20\0\1\22\1\0\36\22\35\0\131\22"+
    "\13\0\1\22\30\0\41\22\11\0\2\22\4\0\1\22"+
    "\5\0\26\22\4\0\1\22\11\0\1\22\3\0\1\22"+
    "\27\0\31\22\7\0\13\22\65\0\25\22\1\0\10\22"+
    "\106\0\66\22\3\0\1\22\22\0\1\22\7\0\12\22"+
    "\17\0\20\22\4\0\10\22\2\0\2\22\2\0\26\22"+
    "\1\0\7\22\1\0\1\22\3\0\4\22\3\0\1\22"+
    "\20\0\1\22\15\0\2\22\1\0\3\22\16\0\2\22"+
    "\12\0\1\22\10\0\6\22\4\0\2\22\2\0\26\22"+
    "\1\0\7\22\1\0\2\22\1\0\2\22\1\0\2\22"+
    "\37\0\4\22\1\0\1\22\23\0\3\22\20\0\11\22"+
    "\1\0\3\22\1\0\26\22\1\0\7\22\1\0\2\22"+
    "\1\0\5\22\3\0\1\22\22\0\1\22\17\0\2\22"+
    "\27\0\1\22\13\0\10\22\2\0\2\22\2\0\26\22"+
    "\1\0\7\22\1\0\2\22\1\0\5\22\3\0\1\22"+
    "\36\0\2\22\1\0\3\22\17\0\1\22\21\0\1\22"+
    "\1\0\6\22\3\0\3\22\1\0\4\22\3\0\2\22"+
    "\1\0\1\22\1\0\2\22\3\0\2\22\3\0\3\22"+
    "\3\0\14\22\26\0\1\22\64\0\10\22\1\0\3\22"+
    "\1\0\27\22\1\0\20\22\3\0\1\22\32\0\3\22"+
    "\5\0\2\22\36\0\1\22\4\0\10\22\1\0\3\22"+
    "\1\0\27\22\1\0\12\22\1\0\5\22\3\0\1\22"+
    "\40\0\1\22\1\0\2\22\17\0\2\22\22\0\10\22"+
    "\1\0\3\22\1\0\51\22\2\0\1\22\20\0\1\22"+
    "\5\0\3\22\10\0\3\22\30\0\6\22\5\0\22\22"+
    "\3\0\30\22\1\0\11\22\1\0\1\22\2\0\7\22"+
    "\72\0\60\22\1\0\2\22\14\0\7\22\72\0\2\22"+
    "\1\0\1\22\1\0\5\22\1\0\30\22\1\0\1\22"+
    "\1\0\12\22\1\0\2\22\11\0\1\22\2\0\5\22"+
    "\1\0\1\22\25\0\4\22\40\0\1\22\77\0\10\22"+
    "\1\0\44\22\33\0\5\22\163\0\53\22\24\0\1\22"+
    "\20\0\6\22\4\0\4\22\3\0\1\22\3\0\2\22"+
    "\7\0\3\22\4\0\15\22\14\0\1\22\21\0\46\22"+
    "\1\0\1\22\5\0\1\22\2\0\53\22\1\0\115\22"+
    "\1\0\4\22\2\0\7\22\1\0\1\22\1\0\4\22"+
    "\2\0\51\22\1\0\4\22\2\0\41\22\1\0\4\22"+
    "\2\0\7\22\1\0\1\22\1\0\4\22\2\0\17\22"+
    "\1\0\71\22\1\0\4\22\2\0\103\22\45\0\20\22"+
    "\20\0\126\22\2\0\6\22\3\0\u016c\22\2\0\21\22"+
    "\1\0\32\22\5\0\113\22\6\0\10\22\7\0\15\22"+
    "\1\0\4\22\16\0\22\22\16\0\22\22\16\0\15\22"+
    "\1\0\3\22\17\0\64\22\43\0\1\22\4\0\1\22"+
    "\103\0\131\22\7\0\5\22\2\0\42\22\1\0\1\22"+
    "\5\0\106\22\12\0\37\22\61\0\36\22\2\0\5\22"+
    "\13\0\54\22\4\0\32\22\66\0\27\22\11\0\65\22"+
    "\122\0\1\22\135\0\57\22\21\0\7\22\67\0\36\22"+
    "\15\0\2\22\12\0\54\22\32\0\44\22\51\0\3\22"+
    "\12\0\44\22\2\0\11\22\7\0\53\22\2\0\3\22"+
    "\51\0\4\22\1\0\6\22\1\0\2\22\3\0\1\22"+
    "\5\0\300\22\100\0\26\22\2\0\6\22\2\0\46\22"+
    "\2\0\6\22\2\0\10\22\1\0\1\22\1\0\1\22"+
    "\1\0\1\22\1\0\37\22\2\0\65\22\1\0\7\22"+
    "\1\0\1\22\3\0\3\22\1\0\7\22\3\0\4\22"+
    "\2\0\6\22\4\0\15\22\5\0\3\22\1\0\7\22"+
    "\53\0\2\103\107\0\1\22\15\0\1\22\20\0\15\22"+
    "\145\0\1\22\4\0\1\22\2\0\12\22\1\0\1\22"+
    "\3\0\5\22\6\0\1\22\1\0\1\22\1\0\1\22"+
    "\1\0\4\22\1\0\13\22\2\0\4\22\5\0\5\22"+
    "\4\0\1\22\64\0\2\22\u017b\0\57\22\1\0\57\22"+
    "\1\0\205\22\6\0\4\22\3\0\2\22\14\0\46\22"+
    "\1\0\1\22\5\0\1\22\2\0\70\22\7\0\1\22"+
    "\20\0\27\22\11\0\7\22\1\0\7\22\1\0\7\22"+
    "\1\0\7\22\1\0\7\22\1\0\7\22\1\0\7\22"+
    "\1\0\7\22\120\0\1\22\325\0\2\22\52\0\5\22"+
    "\5\0\2\22\4\0\126\22\6\0\3\22\1\0\132\22"+
    "\1\0\4\22\5\0\53\22\1\0\136\22\21\0\33\22"+
    "\65\0\306\22\112\0\360\22\20\0\215\22\103\0\56\22"+
    "\2\0\15\22\3\0\20\22\12\0\2\22\24\0\57\22"+
    "\20\0\37\22\2\0\106\22\61\0\11\22\2\0\147\22"+
    "\2\0\65\22\2\0\5\22\60\0\13\22\1\0\3\22"+
    "\1\0\4\22\1\0\27\22\35\0\64\22\16\0\62\22"+
    "\76\0\6\22\3\0\1\22\1\0\2\22\13\0\34\22"+
    "\12\0\27\22\31\0\35\22\7\0\57\22\34\0\1\22"+
    "\20\0\5\22\1\0\12\22\12\0\5\22\1\0\51\22"+
    "\27\0\3\22\1\0\10\22\24\0\27\22\3\0\1\22"+
    "\3\0\62\22\1\0\1\22\3\0\2\22\2\0\5\22"+
    "\2\0\1\22\1\0\1\22\30\0\3\22\2\0\13\22"+
    "\7\0\3\22\14\0\6\22\2\0\6\22\2\0\6\22"+
    "\11\0\7\22\1\0\7\22\1\0\53\22\1\0\14\22"+
    "\10\0\163\22\35\0\244\22\14\0\27\22\4\0\61\22"+
    "\4\0\156\22\2\0\152\22\46\0\7\22\14\0\5\22"+
    "\5\0\1\22\1\0\12\22\1\0\15\22\1\0\5\22"+
    "\1\0\1\22\1\0\2\22\1\0\2\22\1\0\154\22"+
    "\41\0\153\22\22\0\100\22\2\0\66\22\50\0\14\22"+
    "\164\0\5\22\1\0\207\22\44\0\32\22\6\0\32\22"+
    "\13\0\131\22\3\0\6\22\2\0\6\22\2\0\6\22"+
    "\2\0\3\22\43\0\14\22\1\0\32\22\1\0\23\22"+
    "\1\0\2\22\1\0\17\22\2\0\16\22\42\0\173\22"+
    "\205\0\35\22\3\0\61\22\57\0\40\22\15\0\24\22"+
    "\1\0\10\22\6\0\46\22\12\0\36\22\2\0\44\22"+
    "\4\0\10\22\60\0\236\22\22\0\44\22\4\0\44\22"+
    "\4\0\50\22\10\0\64\22\234\0\67\22\11\0\26\22"+
    "\12\0\10\22\230\0\6\22\2\0\1\22\1\0\54\22"+
    "\1\0\2\22\3\0\1\22\2\0\27\22\12\0\27\22"+
    "\11\0\37\22\101\0\23\22\1\0\2\22\12\0\26\22"+
    "\12\0\32\22\106\0\70\22\6\0\2\22\100\0\1\22"+
    "\17\0\4\22\1\0\3\22\1\0\35\22\52\0\35\22"+
    "\3\0\35\22\43\0\10\22\1\0\34\22\33\0\66\22"+
    "\12\0\26\22\12\0\23\22\15\0\22\22\156\0\111\22"+
    "\67\0\63\22\15\0\63\22\15\0\44\22\334\0\35\22"+
    "\12\0\1\22\10\0\26\22\232\0\27\22\14\0\65\22"+
    "\113\0\55\22\40\0\31\22\32\0\44\22\35\0\1\22"+
    "\13\0\43\22\3\0\1\22\14\0\60\22\16\0\4\22"+
    "\25\0\1\22\1\0\1\22\43\0\22\22\1\0\31\22"+
    "\124\0\7\22\1\0\1\22\1\0\4\22\1\0\17\22"+
    "\1\0\12\22\7\0\57\22\46\0\10\22\2\0\2\22"+
    "\2\0\26\22\1\0\7\22\1\0\2\22\1\0\5\22"+
    "\3\0\1\22\22\0\1\22\14\0\5\22\236\0\65\22"+
    "\22\0\4\22\24\0\1\22\40\0\60\22\24\0\2\22"+
    "\1\0\1\22\270\0\57\22\51\0\4\22\44\0\60\22"+
    "\24\0\1\22\73\0\53\22\15\0\1\22\107\0\33\22"+
    "\345\0\54\22\164\0\100\22\37\0\1\22\240\0\10\22"+
    "\2\0\47\22\20\0\1\22\1\0\1\22\34\0\1\22"+
    "\12\0\50\22\7\0\1\22\25\0\1\22\13\0\56\22"+
    "\23\0\1\22\42\0\71\22\7\0\11\22\1\0\45\22"+
    "\21\0\1\22\61\0\36\22\160\0\7\22\1\0\2\22"+
    "\1\0\46\22\25\0\1\22\31\0\6\22\1\0\2\22"+
    "\1\0\40\22\16\0\1\22\u0147\0\23\22\15\0\232\22"+
    "\346\0\304\22\274\0\57\22\321\0\107\22\271\0\71\22"+
    "\7\0\37\22\161\0\36\22\22\0\60\22\20\0\4\22"+
    "\37\0\25\22\5\0\23\22\260\0\100\22\200\0\113\22"+
    "\5\0\1\22\102\0\15\22\100\0\2\22\1\0\1\22"+
    "\34\0\370\22\10\0\363\22\15\0\37\22\61\0\3\22"+
    "\21\0\4\22\10\0\u018c\22\4\0\153\22\5\0\15\22"+
    "\3\0\11\22\7\0\12\22\146\0\125\22\1\0\107\22"+
    "\1\0\2\22\2\0\1\22\2\0\2\22\2\0\4\22"+
    "\1\0\14\22\1\0\1\22\1\0\7\22\1\0\101\22"+
    "\1\0\4\22\2\0\10\22\1\0\7\22\1\0\34\22"+
    "\1\0\4\22\1\0\5\22\1\0\1\22\3\0\7\22"+
    "\1\0\u0154\22\2\0\31\22\1\0\31\22\1\0\37\22"+
    "\1\0\31\22\1\0\37\22\1\0\31\22\1\0\37\22"+
    "\1\0\31\22\1\0\37\22\1\0\31\22\1\0\10\22"+
    "\64\0\55\22\12\0\7\22\20\0\1\22\u0171\0\54\22"+
    "\24\0\305\22\73\0\104\22\7\0\1\22\264\0\4\22"+
    "\1\0\33\22\1\0\2\22\1\0\1\22\2\0\1\22"+
    "\1\0\12\22\1\0\4\22\1\0\1\22\1\0\1\22"+
    "\6\0\1\22\4\0\1\22\1\0\1\22\1\0\1\22"+
    "\1\0\3\22\1\0\2\22\1\0\1\22\2\0\1\22"+
    "\1\0\1\22\1\0\1\22\1\0\1\22\1\0\1\22"+
    "\1\0\2\22\1\0\1\22\2\0\4\22\1\0\7\22"+
    "\1\0\4\22\1\0\4\22\1\0\1\22\1\0\12\22"+
    "\1\0\21\22\5\0\3\22\1\0\5\22\1\0\21\22"+
    "\104\0\327\22\51\0\65\22\13\0\336\22\2\0\u0182\22"+
    "\16\0\u0131\22\37\0\36\22\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[27648];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\2\0\1\2\10\0\1\3\3\0\1\3\2\0"+
    "\1\1\2\4\5\1\3\5\1\6\1\5\1\7\1\5"+
    "\2\2\1\5\2\10\1\11\1\12\1\10\1\13\1\10"+
    "\1\14\2\15\1\16\1\17\1\20\1\21\2\22\1\23"+
    "\1\24\1\25\2\24\3\26\2\5\1\3\1\27\1\5"+
    "\3\3\1\30\2\5\1\31\2\5\1\32\2\5\1\33"+
    "\1\5\1\34\1\35\1\5\1\36\1\37\1\40\1\41"+
    "\1\42\2\5\1\43\3\44\10\0\1\45\1\46\1\47"+
    "\1\50\1\0\1\51\1\0\6\2\1\0\1\45\1\52"+
    "\1\22\1\53\1\54\1\55\1\3\1\56\1\3\5\0"+
    "\1\57\1\60\1\42\1\61\1\62\3\0\1\63\13\0"+
    "\1\64\2\0\2\2\1\0\1\63\5\2\1\65\1\66"+
    "\1\3\4\0\1\67\2\0\1\70\5\0\1\71\1\67"+
    "\1\2\1\0\1\2\1\3\1\15\2\0\1\72\1\0"+
    "\1\73\1\74\2\0\1\75\4\0\1\76\1\77\5\0"+
    "\1\100\1\101\1\102";

  private static int [] zzUnpackAction() {
    int [] result = new int[208];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\104\0\210\0\314\0\u0110\0\u0154\0\u0198\0\u01dc"+
    "\0\u0220\0\u0264\0\u02a8\0\u02ec\0\u0330\0\u0374\0\u03b8\0\u03fc"+
    "\0\u0440\0\u0484\0\u04c8\0\u050c\0\u0550\0\u0594\0\u05d8\0\u061c"+
    "\0\u0660\0\u06a4\0\u06e8\0\u05d8\0\u072c\0\u061c\0\u0770\0\u07b4"+
    "\0\u07f8\0\u083c\0\u0880\0\u08c4\0\u0908\0\u05d8\0\u061c\0\u094c"+
    "\0\u05d8\0\u0990\0\u09d4\0\u0a18\0\u05d8\0\u0a5c\0\u0aa0\0\u05d8"+
    "\0\u05d8\0\u05d8\0\u05d8\0\u0ae4\0\u0b28\0\u05d8\0\u05d8\0\u05d8"+
    "\0\u061c\0\u0b6c\0\u05d8\0\u061c\0\u0a18\0\u0bb0\0\u0bf4\0\u0c38"+
    "\0\u05d8\0\u0c7c\0\u0cc0\0\u0d04\0\u0d48\0\u05d8\0\u0d8c\0\u0dd0"+
    "\0\u05d8\0\u0e14\0\u0e58\0\u05d8\0\u0e9c\0\u0ee0\0\u05d8\0\u0f24"+
    "\0\u0f68\0\u0fac\0\u0ff0\0\u05d8\0\u05d8\0\u05d8\0\u05d8\0\u0fac"+
    "\0\u0fac\0\u1034\0\u05d8\0\u05d8\0\u061c\0\u1078\0\u10bc\0\u1100"+
    "\0\u1144\0\u1188\0\u11cc\0\u1210\0\u1254\0\u1298\0\u12dc\0\u1320"+
    "\0\u050c\0\u05d8\0\u1364\0\u05d8\0\u13a8\0\u13ec\0\u1430\0\u1474"+
    "\0\u14b8\0\u14fc\0\u1540\0\u1584\0\u05d8\0\u05d8\0\u15c8\0\u05d8"+
    "\0\u05d8\0\u05d8\0\u160c\0\u0c38\0\u1650\0\u0d8c\0\u0dd0\0\u1694"+
    "\0\u16d8\0\u171c\0\u05d8\0\u05d8\0\u05d8\0\u05d8\0\u05d8\0\u1760"+
    "\0\u17a4\0\u17e8\0\u05d8\0\u182c\0\u1870\0\u18b4\0\u18f8\0\u193c"+
    "\0\u1980\0\u19c4\0\u1a08\0\u1a4c\0\u1a90\0\u1ad4\0\u1b18\0\u1b5c"+
    "\0\u1ba0\0\u1be4\0\u1c28\0\u1c6c\0\u0880\0\u1cb0\0\u1cf4\0\u1d38"+
    "\0\u1d7c\0\u1dc0\0\u05d8\0\u0c38\0\u1e04\0\u1e48\0\u1e8c\0\u1ed0"+
    "\0\u1f14\0\u05d8\0\u1f58\0\u1f9c\0\u05d8\0\u1fe0\0\u2024\0\u2068"+
    "\0\u20ac\0\u20f0\0\u05d8\0\u0880\0\u2134\0\u2178\0\u21bc\0\u2200"+
    "\0\u05d8\0\u2244\0\u2288\0\u05d8\0\u22cc\0\u05d8\0\u05d8\0\u2310"+
    "\0\u2354\0\u0c38\0\u2398\0\u23dc\0\u2420\0\u2464\0\u05d8\0\u05d8"+
    "\0\u24a8\0\u24ec\0\u2530\0\u2574\0\u25b8\0\u05d8\0\u05d8\0\u05d8";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[208];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\24\1\25\1\26\2\24\2\27\1\24\1\30\13\24"+
    "\1\31\22\24\1\32\1\33\33\24\1\34\2\25\4\34"+
    "\1\35\1\36\5\34\1\37\1\40\1\34\1\37\5\34"+
    "\20\37\3\34\26\37\5\34\2\25\5\34\1\36\16\34"+
    "\20\41\2\34\1\42\26\41\4\34\10\43\1\44\5\43"+
    "\1\45\65\43\10\46\1\47\11\46\1\50\1\46\1\51"+
    "\2\46\20\50\3\46\26\50\14\46\1\47\11\46\1\50"+
    "\1\46\1\52\2\46\20\50\3\46\26\50\5\46\1\53"+
    "\6\46\1\47\7\46\1\54\5\46\1\55\54\46\1\53"+
    "\1\56\1\25\1\57\1\56\1\60\4\56\1\61\6\56"+
    "\1\54\3\56\1\46\1\62\1\63\55\56\1\64\1\34"+
    "\2\64\1\60\4\64\1\61\6\64\1\65\5\64\1\66"+
    "\55\64\4\67\1\70\3\67\1\71\37\67\1\72\43\67"+
    "\1\71\1\70\36\67\1\72\33\67\10\73\1\74\7\73"+
    "\1\75\3\73\1\51\1\73\1\55\55\73\1\34\2\25"+
    "\3\34\1\76\1\77\1\36\10\34\1\100\1\34\1\101"+
    "\1\102\2\34\20\100\3\34\5\100\1\103\2\100\1\104"+
    "\13\100\1\105\1\100\2\34\1\106\2\34\2\25\1\34"+
    "\1\107\3\34\1\36\1\110\14\34\1\111\6\34\1\112"+
    "\4\34\1\113\16\34\1\112\5\34\1\113\15\34\2\25"+
    "\1\34\1\114\1\115\1\34\1\116\1\36\74\34\2\25"+
    "\1\34\1\117\3\34\1\36\6\34\1\120\7\34\20\121"+
    "\3\34\26\121\5\34\2\25\1\122\4\34\1\123\1\34"+
    "\1\124\1\125\1\34\1\126\1\34\1\127\1\34\1\100"+
    "\1\34\1\101\1\130\1\131\1\130\20\100\3\34\26\100"+
    "\1\34\1\132\3\34\2\25\5\34\1\36\67\34\1\133"+
    "\3\34\1\134\2\25\5\134\1\135\45\134\1\136\21\134"+
    "\1\133\3\134\1\24\1\0\3\24\2\0\1\24\1\0"+
    "\13\24\1\0\23\24\1\33\33\24\1\0\2\25\101\0"+
    "\1\24\1\25\1\26\2\24\2\0\1\24\1\0\13\24"+
    "\1\0\23\24\1\33\33\24\111\0\1\137\14\0\1\140"+
    "\4\0\20\140\3\0\1\141\5\140\1\142\2\140\1\142"+
    "\1\140\1\143\2\140\1\144\7\140\7\0\1\145\3\0"+
    "\1\146\10\0\1\147\1\0\1\150\4\0\20\150\3\0"+
    "\26\150\4\0\1\24\1\0\3\24\2\0\1\24\1\0"+
    "\13\24\1\0\22\24\1\151\1\33\34\24\1\0\6\24"+
    "\1\0\13\24\1\0\23\24\1\33\33\24\26\0\1\152"+
    "\73\0\1\37\2\0\1\37\5\0\20\37\3\0\26\37"+
    "\60\0\1\153\50\0\1\41\5\0\20\41\3\0\26\41"+
    "\55\0\1\154\32\0\16\43\1\155\72\43\1\156\10\43"+
    "\1\155\3\43\1\157\4\43\20\157\3\43\1\160\5\157"+
    "\1\161\2\157\1\161\1\157\1\162\2\157\1\163\7\157"+
    "\22\43\1\164\65\43\16\0\2\50\1\0\2\50\4\0"+
    "\20\50\3\0\26\50\24\0\1\165\64\0\1\53\101\0"+
    "\1\53\26\0\1\166\55\0\1\56\1\0\2\56\1\0"+
    "\4\56\1\0\6\56\1\0\3\56\3\0\56\56\1\25"+
    "\1\57\1\56\1\0\4\56\1\0\6\56\1\0\3\56"+
    "\3\0\55\56\1\64\1\0\16\64\1\167\5\64\1\0"+
    "\56\64\1\0\16\64\1\167\5\64\1\166\55\64\6\0"+
    "\1\67\103\0\1\170\123\0\1\171\76\0\1\100\5\0"+
    "\20\100\3\0\26\100\30\0\1\172\100\0\1\100\5\0"+
    "\20\100\3\0\14\100\1\173\11\100\25\0\1\100\5\0"+
    "\20\100\3\0\5\100\1\174\20\100\25\0\1\100\5\0"+
    "\20\100\3\0\7\100\1\175\16\100\4\0\4\176\1\67"+
    "\77\176\11\177\1\67\72\177\43\0\1\200\27\0\1\200"+
    "\54\0\1\201\27\0\1\201\71\0\1\202\47\0\1\203"+
    "\136\0\1\204\43\0\1\121\5\0\20\121\3\0\26\121"+
    "\31\0\1\205\63\0\1\137\2\0\1\206\11\0\1\140"+
    "\4\0\20\140\3\0\1\141\5\140\1\142\2\140\1\142"+
    "\1\140\1\143\2\140\1\144\7\140\105\0\1\207\65\0"+
    "\1\210\41\0\1\211\23\0\1\212\54\0\2\140\1\0"+
    "\2\140\1\213\3\0\20\140\3\0\26\140\22\0\2\140"+
    "\1\0\2\140\1\213\3\0\20\140\3\0\12\140\1\214"+
    "\2\140\1\215\10\140\22\0\2\140\1\0\2\140\1\213"+
    "\3\0\20\140\3\0\21\140\1\216\4\140\22\0\2\140"+
    "\1\0\2\140\1\213\3\0\20\140\3\0\1\140\1\217"+
    "\24\140\22\0\2\140\1\0\2\140\1\213\3\0\20\140"+
    "\3\0\22\140\1\220\3\140\22\0\1\221\13\0\1\222"+
    "\22\0\1\222\102\0\1\223\5\0\1\224\1\225\11\0"+
    "\1\226\30\0\1\227\4\0\20\227\3\0\26\227\22\0"+
    "\2\150\1\0\2\150\4\0\20\150\3\0\26\150\76\0"+
    "\1\230\11\0\16\43\1\231\103\43\1\155\2\43\1\232"+
    "\23\43\1\233\54\43\1\234\1\157\1\43\2\157\1\235"+
    "\3\43\20\157\3\43\26\157\22\43\1\234\1\157\1\43"+
    "\2\157\1\235\3\43\20\157\3\43\12\157\1\236\2\157"+
    "\1\237\10\157\22\43\1\234\1\157\1\43\2\157\1\235"+
    "\3\43\20\157\3\43\21\157\1\240\4\157\22\43\1\234"+
    "\1\157\1\43\2\157\1\235\3\43\20\157\3\43\1\157"+
    "\1\241\24\157\22\43\1\234\1\157\1\43\2\157\1\235"+
    "\3\43\20\157\3\43\22\157\1\242\3\157\32\43\1\243"+
    "\55\43\20\64\1\167\5\64\1\0\55\64\21\0\1\100"+
    "\5\0\20\100\3\0\17\100\1\244\6\100\25\0\1\100"+
    "\5\0\20\100\3\0\10\100\1\245\15\100\44\0\1\246"+
    "\23\0\1\246\47\0\1\247\22\0\1\247\115\0\1\250"+
    "\110\0\1\251\32\0\1\211\1\0\1\252\101\0\1\253"+
    "\5\0\5\253\16\0\6\253\42\0\2\140\1\0\2\140"+
    "\1\213\3\0\20\140\3\0\15\140\1\216\10\140\22\0"+
    "\2\140\1\0\2\140\1\213\3\0\20\140\3\0\14\140"+
    "\1\254\11\140\22\0\2\140\1\0\2\140\1\252\3\0"+
    "\20\140\3\0\26\140\22\0\2\140\1\0\2\140\1\213"+
    "\3\0\20\140\3\0\20\140\1\214\5\140\22\0\2\140"+
    "\1\0\2\140\1\213\3\0\20\140\3\0\14\140\1\142"+
    "\11\140\22\0\1\255\126\0\1\256\24\0\1\256\31\0"+
    "\1\257\154\0\1\260\70\0\1\261\113\0\1\262\37\0"+
    "\2\227\1\0\2\227\4\0\20\227\3\0\26\227\73\0"+
    "\1\263\14\0\26\43\1\0\73\43\1\155\2\43\1\232"+
    "\1\43\1\264\76\43\1\155\2\43\1\265\5\43\5\265"+
    "\16\43\6\265\42\43\1\266\1\157\1\43\2\157\1\235"+
    "\3\43\20\157\3\43\26\157\22\43\1\234\1\157\1\43"+
    "\2\157\1\235\3\43\20\157\3\43\15\157\1\240\10\157"+
    "\22\43\1\234\1\157\1\43\2\157\1\235\3\43\20\157"+
    "\3\43\14\157\1\267\11\157\22\43\1\234\1\157\1\43"+
    "\2\157\1\264\3\43\20\157\3\43\26\157\22\43\1\234"+
    "\1\157\1\43\2\157\1\235\3\43\20\157\3\43\20\157"+
    "\1\236\5\157\22\43\1\234\1\157\1\43\2\157\1\235"+
    "\3\43\20\157\3\43\14\157\1\161\11\157\4\43\21\0"+
    "\1\100\5\0\20\100\3\0\11\100\1\270\14\100\43\0"+
    "\1\271\23\0\1\271\57\0\1\272\23\0\1\272\74\0"+
    "\1\273\105\0\1\274\46\0\1\253\1\0\1\252\3\0"+
    "\5\253\16\0\6\253\42\0\2\140\1\0\2\140\1\213"+
    "\3\0\20\140\3\0\20\140\1\216\5\140\35\0\1\275"+
    "\22\0\1\275\43\0\1\276\143\0\1\277\126\0\1\300"+
    "\62\0\1\301\25\0\16\43\1\155\2\43\1\265\1\43"+
    "\1\264\3\43\5\265\16\43\6\265\42\43\2\157\1\43"+
    "\2\157\1\235\2\43\1\0\20\157\3\43\26\157\22\43"+
    "\1\234\1\157\1\43\2\157\1\235\3\43\20\157\3\43"+
    "\20\157\1\240\5\157\4\43\21\0\1\100\5\0\20\100"+
    "\3\0\4\100\1\302\21\100\42\0\1\303\23\0\1\303"+
    "\104\0\1\304\63\0\1\305\27\0\1\305\76\0\1\306"+
    "\113\0\1\307\36\0\1\310\22\0\1\310\123\0\1\311"+
    "\55\0\1\312\30\0\1\312\100\0\1\313\64\0\1\314"+
    "\70\0\1\315\24\0\1\315\107\0\1\316\66\0\1\317"+
    "\60\0\1\320\22\0\1\320\25\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[9724];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\2\0\1\1\10\0\1\1\3\0\1\1\2\0"+
    "\3\1\1\11\4\1\1\11\11\1\1\11\2\1\1\11"+
    "\3\1\1\11\2\1\4\11\2\1\3\11\2\1\1\11"+
    "\5\1\1\11\4\1\1\11\2\1\1\11\2\1\1\11"+
    "\2\1\1\11\4\1\4\11\3\1\2\11\2\1\10\0"+
    "\3\1\1\11\1\0\1\11\1\0\6\1\1\0\2\11"+
    "\1\1\3\11\3\1\5\0\5\11\3\0\1\11\13\0"+
    "\1\1\2\0\2\1\1\0\6\1\1\11\2\1\4\0"+
    "\1\11\2\0\1\11\5\0\1\11\2\1\1\0\2\1"+
    "\1\11\2\0\1\11\1\0\2\11\2\0\1\1\4\0"+
    "\2\11\5\0\3\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[208];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
  private static final java.util.Set<String> VOID_ELEMENTS = new java.util.HashSet<String>() {{
    add("area");
    add("base");
    add("br");
    add("col");
    add("embed");
    add("hr");
    add("img");
    add("input");
    add("link");
    add("meta");
    add("param");
    add("source");
    add("track");
    add("wbr");
  }};

  private StringBuilder tagNameBuilder = new StringBuilder();
  private boolean isStartTag = false;

  public CSPDrogonLexer() {
    this((java.io.Reader)null);
  }

  private boolean isVoidElement() {
    return VOID_ELEMENTS.contains(tagNameBuilder.toString().toLowerCase());
  }

  private void startNewTag() {
      tagNameBuilder.setLength(0);
      isStartTag = true;
    }

    private void startEndTag() {
      tagNameBuilder.setLength(0);
      isStartTag = false;
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  CSPDrogonLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return CSPDrogonTypes.XML_DATA_CHARACTERS;
            }
          // fall through
          case 67: break;
          case 2:
            { return CSP_COMMENT_CONTENT;
            }
          // fall through
          case 68: break;
          case 3:
            { return CSPDrogonTypes.IDENTIFIER;
            }
          // fall through
          case 69: break;
          case 4:
            { return TokenType.WHITE_SPACE;
            }
          // fall through
          case 70: break;
          case 5:
            { yybegin(YYINITIAL);return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 71: break;
          case 6:
            { return CSPDrogonTypes.FILE_NAME;
            }
          // fall through
          case 72: break;
          case 7:
            { return CSPDrogonTypes.PARAM_VARIABLE_NAME;
            }
          // fall through
          case 73: break;
          case 8:
            { yybegin(YYINITIAL); yypushback(1); break;
            }
          // fall through
          case 74: break;
          case 9:
            { for (int i = 0; i < yylength(); i++) {
              tagNameBuilder.append(yycharat(i));
          }
          yybegin(BEFORE_TAG_ATTRIBUTES); return CSPDrogonTypes.XML_NAME;
            }
          // fall through
          case 75: break;
          case 10:
            { return CSPDrogonTypes.XML_START_TAG_START;
            }
          // fall through
          case 76: break;
          case 11:
            { yybegin(TAG_ATTRIBUTES); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 77: break;
          case 12:
            { if(isVoidElement()){
              yybegin(YYINITIAL);
              return CSPDrogonTypes.XML_EMPTY_ELEMENT_END;
          }else{
            yybegin(YYINITIAL); return CSPDrogonTypes.XML_TAG_END;
          }
            }
          // fall through
          case 78: break;
          case 13:
            { return CSPDrogonTypes.XML_NAME;
            }
          // fall through
          case 79: break;
          case 14:
            { yybegin(ATTRIBUTE_VALUE_DQ); return CSPDrogonTypes.XML_ATTRIBUTE_VALUE_START_DELIMITER;
            }
          // fall through
          case 80: break;
          case 15:
            { yybegin(ATTRIBUTE_VALUE_SQ); return CSPDrogonTypes.XML_ATTRIBUTE_VALUE_START_DELIMITER;
            }
          // fall through
          case 81: break;
          case 16:
            { yybegin(ATTRIBUTE_VALUE_START); return CSPDrogonTypes.XML_EQ;
            }
          // fall through
          case 82: break;
          case 17:
            { if(isVoidElement()){
                                yybegin(YYINITIAL);
                                return CSPDrogonTypes.XML_EMPTY_ELEMENT_END;
                            }else{
                              yybegin(YYINITIAL); return CSPDrogonTypes.XML_TAG_END;
                            }
            }
          // fall through
          case 83: break;
          case 18:
            { yybegin(TAG_ATTRIBUTES); return CSPDrogonTypes.XML_ATTRIBUTE_VALUE_TOKEN;
            }
          // fall through
          case 84: break;
          case 19:
            { yybegin(YYINITIAL); return CSPDrogonTypes.XML_TAG_END;
            }
          // fall through
          case 85: break;
          case 20:
            { return CSPDrogonTypes.XML_ATTRIBUTE_VALUE_TOKEN;
            }
          // fall through
          case 86: break;
          case 21:
            { yybegin(TAG_ATTRIBUTES); return CSPDrogonTypes.XML_ATTRIBUTE_VALUE_END_DELIMITER;
            }
          // fall through
          case 87: break;
          case 22:
            { return CSPDrogonTypes.XML_TAG_CHARACTERS;
            }
          // fall through
          case 88: break;
          case 23:
            { return CSPDrogonTypes.SEMICOLON;
            }
          // fall through
          case 89: break;
          case 24:
            { yybegin(IN_CPP_CONTROL_ELSE); return CSPDrogonTypes.RBRACE;
            }
          // fall through
          case 90: break;
          case 25:
            { yybegin(YYINITIAL); return CSPDrogonTypes.XML_DOCTYPE_END;
            }
          // fall through
          case 91: break;
          case 26:
            { yybegin(CPP_H_INCLUDE_DELIMITER); return CSPDrogonTypes.H_FILE_START_DELIMITER;
            }
          // fall through
          case 92: break;
          case 27:
            { yybegin(START_CPP_INCLUDE); return CSPDrogonTypes.H_FILE_END_DELIMITER;
            }
          // fall through
          case 93: break;
          case 28:
            { return CSPDrogonTypes.H_FILE;
            }
          // fall through
          case 94: break;
          case 29:
            { return CSPDrogonTypes.NOT;
            }
          // fall through
          case 95: break;
          case 30:
            { return CSPDrogonTypes.LPAREN;
            }
          // fall through
          case 96: break;
          case 31:
            { yybegin(IN_CPP_EXPECT_BRACE); return CSPDrogonTypes.RPAREN;
            }
          // fall through
          case 97: break;
          case 32:
            { return CSPDrogonTypes.COMMA;
            }
          // fall through
          case 98: break;
          case 33:
            { return CSPDrogonTypes.DOT;
            }
          // fall through
          case 99: break;
          case 34:
            { return CSPDrogonTypes.COMPARISON_OPEARTOR;
            }
          // fall through
          case 100: break;
          case 35:
            { yybegin(IN_CPP_DATA); return CSPDrogonTypes.LBRACE;
            }
          // fall through
          case 101: break;
          case 36:
            { yybegin(IN_CPP_DATA); yypushback(1); break;
            }
          // fall through
          case 102: break;
          case 37:
            { return CSPDrogonTypes.XML_END_TAG_START;
            }
          // fall through
          case 103: break;
          case 38:
            { startNewTag(); yybegin(START_TAG_NAME); yypushback(yylength());
            }
          // fall through
          case 104: break;
          case 39:
            { yybegin(IN_PARAMETER); return CSPDrogonTypes.PARAM_START;
            }
          // fall through
          case 105: break;
          case 40:
            { yybegin(YYINITIAL); return CSPDrogonTypes.DIRECTIVE_END;
            }
          // fall through
          case 106: break;
          case 41:
            { yybegin(YYINITIAL); return CSPDrogonTypes.PARAM_END;
            }
          // fall through
          case 107: break;
          case 42:
            { yybegin(YYINITIAL); return CSPDrogonTypes.XML_EMPTY_ELEMENT_END;
            }
          // fall through
          case 108: break;
          case 43:
            { return CSPDrogonTypes.STREAM_OBJECT;
            }
          // fall through
          case 109: break;
          case 44:
            { yybegin(YYINITIAL); return CSPDrogonTypes.CPP_VIEW_END;
            }
          // fall through
          case 110: break;
          case 45:
            { return CSPDrogonTypes.STREAM_OPERATOR;
            }
          // fall through
          case 111: break;
          case 46:
            { yybegin(IN_CPP_CONTROL); return CSPDrogonTypes.IF;
            }
          // fall through
          case 112: break;
          case 47:
            { yybegin(YYINITIAL); return CSPDrogonTypes.CPP_INCLUDE_END;
            }
          // fall through
          case 113: break;
          case 48:
            { return CSPDrogonTypes.H_FILE_EXT;
            }
          // fall through
          case 114: break;
          case 49:
            { return CSPDrogonTypes.AND;
            }
          // fall through
          case 115: break;
          case 50:
            { return CSPDrogonTypes.OR;
            }
          // fall through
          case 116: break;
          case 51:
            { return CSPDrogonTypes.XML_ENTITY_REF_TOKEN;
            }
          // fall through
          case 117: break;
          case 52:
            { startEndTag(); yybegin(END_TAG_NAME); yypushback(yylength());
            }
          // fall through
          case 118: break;
          case 53:
            { yybegin(YYINITIAL);return CSP_COMMENT_END;
            }
          // fall through
          case 119: break;
          case 54:
            { yybegin(IN_CPP_CONTROL); return CSPDrogonTypes.FOR;
            }
          // fall through
          case 120: break;
          case 55:
            { return CSPDrogonTypes.XML_CHAR_ENTITY_REF;
            }
          // fall through
          case 121: break;
          case 56:
            { yybegin(IN_COMMENT);return CSP_COMMENT_START;
            }
          // fall through
          case 122: break;
          case 57:
            { return CSPDrogonTypes.CSP_EXT;
            }
          // fall through
          case 123: break;
          case 58:
            { return CSPDrogonTypes.ELSE;
            }
          // fall through
          case 124: break;
          case 59:
            { yybegin(IN_CPP_DATA); return CSPDrogonTypes.CPP_VIEW_START;
            }
          // fall through
          case 125: break;
          case 60:
            { yybegin(START_CPP_INCLUDE); return CSPDrogonTypes.CPP_INCLUDE_START;
            }
          // fall through
          case 126: break;
          case 61:
            { yybegin(IN_CPP_CONTROL); return CSPDrogonTypes.WHILE;
            }
          // fall through
          case 127: break;
          case 62:
            { yybegin(IN_DIRECTIVE); return CSPDrogonTypes.VIEW_START;
            }
          // fall through
          case 128: break;
          case 63:
            { return CSPDrogonTypes.XML_DOCTYPE_PUBLIC;
            }
          // fall through
          case 129: break;
          case 64:
            { yybegin(IN_DIRECTIVE); return CSPDrogonTypes.LAYOUT_START;
            }
          // fall through
          case 130: break;
          case 65:
            { return CSPDrogonTypes.CPP_INCLUDE;
            }
          // fall through
          case 131: break;
          case 66:
            { yybegin(IN_DOCTYPE); return CSPDrogonTypes.XML_DOCTYPE_START;
            }
          // fall through
          case 132: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
